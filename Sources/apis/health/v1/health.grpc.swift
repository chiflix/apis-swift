//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: health/v1/health.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Sagittarius_Health_V1_HealthClient, then call methods of this protocol to make API calls.
public protocol Sagittarius_Health_V1_HealthClientProtocol: GRPCClient {
  func check(
    _ request: Sagittarius_Health_V1_HealthCheckRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sagittarius_Health_V1_HealthCheckRequest, Sagittarius_Health_V1_HealthCheckResponse>

}

extension Sagittarius_Health_V1_HealthClientProtocol {

  /// Unary call to Check
  ///
  /// - Parameters:
  ///   - request: Request to send to Check.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func check(
    _ request: Sagittarius_Health_V1_HealthCheckRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sagittarius_Health_V1_HealthCheckRequest, Sagittarius_Health_V1_HealthCheckResponse> {
    return self.makeUnaryCall(
      path: "/sagittarius.health.v1.Health/Check",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Sagittarius_Health_V1_HealthClient: Sagittarius_Health_V1_HealthClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the sagittarius.health.v1.Health service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Sagittarius_Health_V1_HealthProvider: CallHandlerProvider {
  func check(request: Sagittarius_Health_V1_HealthCheckRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sagittarius_Health_V1_HealthCheckResponse>
}

extension Sagittarius_Health_V1_HealthProvider {
  public var serviceName: Substring { return "sagittarius.health.v1.Health" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "Check":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.check(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

