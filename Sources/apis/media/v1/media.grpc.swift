//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: media/v1/media.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Sagittarius_Media_V1_MediaClient, then call methods of this protocol to make API calls.
public protocol Sagittarius_Media_V1_MediaClientProtocol: GRPCClient {
  func getInfo(
    _ request: Sagittarius_Media_V1_GetInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sagittarius_Media_V1_GetInfoRequest, Sagittarius_Media_V1_Info>

  func updateInfo(
    _ request: Sagittarius_Media_V1_UpdateInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sagittarius_Media_V1_UpdateInfoRequest, Sagittarius_Media_V1_Info>

  func getThumbnailTimeRanges(
    _ request: Sagittarius_Media_V1_ThumbnailTimeRangesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sagittarius_Media_V1_ThumbnailTimeRangesRequest, Sagittarius_Media_V1_ThumbnailTimeRangesResponse>

  func getThumbnail(
    _ request: Sagittarius_Media_V1_ThumbnailRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sagittarius_Media_V1_ThumbnailRequest, Sagittarius_Media_V1_ThumbnailResponse>

  func updateThumbnail(
    _ request: Sagittarius_Media_V1_UpdateThumbnailRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sagittarius_Media_V1_UpdateThumbnailRequest, Google_Rpc_Status>

}

extension Sagittarius_Media_V1_MediaClientProtocol {

  /// Unary call to GetInfo
  ///
  /// - Parameters:
  ///   - request: Request to send to GetInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getInfo(
    _ request: Sagittarius_Media_V1_GetInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sagittarius_Media_V1_GetInfoRequest, Sagittarius_Media_V1_Info> {
    return self.makeUnaryCall(
      path: "/sagittarius.media.v1.Media/GetInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to UpdateInfo
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateInfo(
    _ request: Sagittarius_Media_V1_UpdateInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sagittarius_Media_V1_UpdateInfoRequest, Sagittarius_Media_V1_Info> {
    return self.makeUnaryCall(
      path: "/sagittarius.media.v1.Media/UpdateInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Query obtainable thumbnails time range and unavailable ones by media identity
  ///
  /// - Parameters:
  ///   - request: Request to send to GetThumbnailTimeRanges.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getThumbnailTimeRanges(
    _ request: Sagittarius_Media_V1_ThumbnailTimeRangesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sagittarius_Media_V1_ThumbnailTimeRangesRequest, Sagittarius_Media_V1_ThumbnailTimeRangesResponse> {
    return self.makeUnaryCall(
      path: "/sagittarius.media.v1.Media/GetThumbnailTimeRanges",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get thumbnail by timestamps
  ///
  /// - Parameters:
  ///   - request: Request to send to GetThumbnail.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getThumbnail(
    _ request: Sagittarius_Media_V1_ThumbnailRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sagittarius_Media_V1_ThumbnailRequest, Sagittarius_Media_V1_ThumbnailResponse> {
    return self.makeUnaryCall(
      path: "/sagittarius.media.v1.Media/GetThumbnail",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Update thumbnail by timestamps
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateThumbnail.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateThumbnail(
    _ request: Sagittarius_Media_V1_UpdateThumbnailRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sagittarius_Media_V1_UpdateThumbnailRequest, Google_Rpc_Status> {
    return self.makeUnaryCall(
      path: "/sagittarius.media.v1.Media/UpdateThumbnail",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Sagittarius_Media_V1_MediaClient: Sagittarius_Media_V1_MediaClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the sagittarius.media.v1.Media service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Sagittarius_Media_V1_MediaProvider: CallHandlerProvider {
  func getInfo(request: Sagittarius_Media_V1_GetInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sagittarius_Media_V1_Info>
  func updateInfo(request: Sagittarius_Media_V1_UpdateInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sagittarius_Media_V1_Info>
  /// Query obtainable thumbnails time range and unavailable ones by media identity
  func getThumbnailTimeRanges(request: Sagittarius_Media_V1_ThumbnailTimeRangesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sagittarius_Media_V1_ThumbnailTimeRangesResponse>
  /// Get thumbnail by timestamps
  func getThumbnail(request: Sagittarius_Media_V1_ThumbnailRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sagittarius_Media_V1_ThumbnailResponse>
  /// Update thumbnail by timestamps
  func updateThumbnail(request: Sagittarius_Media_V1_UpdateThumbnailRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Rpc_Status>
}

extension Sagittarius_Media_V1_MediaProvider {
  public var serviceName: Substring { return "sagittarius.media.v1.Media" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "GetInfo":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getInfo(request: request, context: context)
        }
      }

    case "UpdateInfo":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateInfo(request: request, context: context)
        }
      }

    case "GetThumbnailTimeRanges":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getThumbnailTimeRanges(request: request, context: context)
        }
      }

    case "GetThumbnail":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getThumbnail(request: request, context: context)
        }
      }

    case "UpdateThumbnail":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateThumbnail(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

