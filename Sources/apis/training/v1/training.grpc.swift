//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: training/v1/training.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Sagittarius_Training_V1_TrainngClient, then call methods of this protocol to make API calls.
public protocol Sagittarius_Training_V1_TrainngClientProtocol: GRPCClient {
  func pushData(
    _ request: Sagittarius_Training_V1_TrainingData,
    callOptions: CallOptions?
  ) -> UnaryCall<Sagittarius_Training_V1_TrainingData, Google_Rpc_Status>

  func streamingTraining(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Sagittarius_Training_V1_StreamingTrainingRequest, Google_Rpc_Status>

}

extension Sagittarius_Training_V1_TrainngClientProtocol {

  /// Push accture traning data to server
  ///
  /// - Parameters:
  ///   - request: Request to send to PushData.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func pushData(
    _ request: Sagittarius_Training_V1_TrainingData,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sagittarius_Training_V1_TrainingData, Google_Rpc_Status> {
    return self.makeUnaryCall(
      path: "/sagittarius.training.v1.Trainng/PushData",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Performs bidirectional streaming audio translation: receive results while
  /// sending audio. This method is only available via the gRPC API (not REST).
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  public func streamingTraining(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Sagittarius_Training_V1_StreamingTrainingRequest, Google_Rpc_Status> {
    return self.makeClientStreamingCall(
      path: "/sagittarius.training.v1.Trainng/StreamingTraining",
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Sagittarius_Training_V1_TrainngClient: Sagittarius_Training_V1_TrainngClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the sagittarius.training.v1.Trainng service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Sagittarius_Training_V1_TrainngProvider: CallHandlerProvider {
  /// Push accture traning data to server
  func pushData(request: Sagittarius_Training_V1_TrainingData, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Rpc_Status>
  /// Performs bidirectional streaming audio translation: receive results while
  /// sending audio. This method is only available via the gRPC API (not REST).
  func streamingTraining(context: UnaryResponseCallContext<Google_Rpc_Status>) -> EventLoopFuture<(StreamEvent<Sagittarius_Training_V1_StreamingTrainingRequest>) -> Void>
}

extension Sagittarius_Training_V1_TrainngProvider {
  public var serviceName: Substring { return "sagittarius.training.v1.Trainng" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "PushData":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.pushData(request: request, context: context)
        }
      }

    case "StreamingTraining":
      return CallHandlerFactory.makeClientStreaming(callHandlerContext: callHandlerContext) { context in
        return self.streamingTraining(context: context)
      }

    default: return nil
    }
  }
}

